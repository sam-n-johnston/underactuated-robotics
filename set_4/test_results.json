{
    "execution_time": "8.30", 
    "tests": [
        {
            "output": "Function not yet implemented\nFunction not yet implemented\nFunction not yet implemented\nFunction not yet implemented\n", 
            "score": 1, 
            "max_score": 1, 
            "name": "Run a few trajectory optimizations once, and persist the output"
        }, 
        {
            "output": "Test Failed: The trajectory, input_trajectory, and time_array have been                     computed to not be consistent with out euler integration when testing                     x0 = [-2.   0.4 -0.1  3. ]\n", 
            "score": 0.0, 
            "max_score": 4, 
            "name": "Check that the system approximately obeys the original dynamics"
        }, 
        {
            "output": "Test Failed: One of the tested trajectories caused the rocket to run out of fuel when testing                     x0 = [-2.   0.4 -0.1  3. ]\n", 
            "score": 0.0, 
            "max_score": 4, 
            "name": "Check that the trajectory was reasonably efficient with fuel use"
        }, 
        {
            "output": "Test Failed: The initial state of the 'trajectory' does not match                 the desired initial state\n", 
            "score": 0.0, 
            "max_score": 10, 
            "name": "Check that the initial state is valid"
        }, 
        {
            "score": 1, 
            "max_score": 1, 
            "name": "Check that the original parameters have not been changed"
        }, 
        {
            "output": "Test Failed: Was not correct distance from second world when testing                     x0 = [-2.   0.4 -0.1  3. ]\n", 
            "score": 0.0, 
            "max_score": 10, 
            "name": "Check that the trajectory satisfied the specified 'orbit' constraint"
        }, 
        {
            "output": "Test Failed: Time was too long\n", 
            "score": 0.0, 
            "max_score": 4, 
            "name": "Check that the time_array is valid"
        }, 
        {
            "output": "\n/notebooks/hopper_2d.py:276: DrakeDeprecationWarning: Use get_state_output_port() instead\n    Please see `help(pydrake.common.deprecation)` for more information.\n  builder.Connect(plant.get_continuous_state_output_port(), state_log.get_input_port(0))\n", 
            "score": 10, 
            "max_score": 10, 
            "name": "Verify that the hopper keeps hopping for 10s"
        }, 
        {
            "score": 5, 
            "max_score": 5, 
            "name": "Verify that the hopper tracks a desired lateral velocity"
        }, 
        {
            "score": 5, 
            "max_score": 5, 
            "name": "Verify that the hopper stabilizes both hopping and theta"
        }, 
        {
            "score": 1, 
            "max_score": 1, 
            "name": "Verify the signature of ChooseThighTorque"
        }
    ], 
    "score": 23.0, 
    "leaderboard": []
}
