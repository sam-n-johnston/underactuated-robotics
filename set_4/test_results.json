{
    "execution_time": "11.17", 
    "tests": [
        {
            "output": "('Success', True)\n('Final position', array([ 2.00472107,  0.03918241,  0.95589028, -0.21417234]))\n('Final distance to world2', 0.50000000000017331)\n('Final speed', 0.98010000000092679)\n('Fuel consumption', 10.751850649836763)\n('Success', True)\n('Final position', array([ 2.2595266 , -0.33723283,  0.35878127,  0.91152181]))\n('Final distance to world2', 0.50000000000005262)\n('Final speed', 0.98010000000024944)\n('Fuel consumption', 44.832634940089008)\n('Success', True)\n('Final position', array([ 2.07277045,  0.3578273 ,  0.83464021, -0.5128077 ]))\n('Final distance to world2', 0.50000000002824685)\n('Final speed', 0.98010000000225062)\n('Fuel consumption', 9.9638858176604188)\n('Success', True)\n('Final position', array([ 2.30434107, -0.35903985,  0.23907098,  0.94996899]))\n('Final distance to world2', 0.50000000000034517)\n('Final speed', 0.98010000000187236)\n('Fuel consumption', 18.109376636522079)\n", 
            "score": 1, 
            "max_score": 1, 
            "name": "Run a few trajectory optimizations once, and persist the output"
        }, 
        {
            "score": 4, 
            "max_score": 4, 
            "name": "Check that the system approximately obeys the original dynamics"
        }, 
        {
            "score": 4, 
            "max_score": 4, 
            "name": "Check that the trajectory was reasonably efficient with fuel use"
        }, 
        {
            "score": 10, 
            "max_score": 10, 
            "name": "Check that the initial state is valid"
        }, 
        {
            "score": 1, 
            "max_score": 1, 
            "name": "Check that the original parameters have not been changed"
        }, 
        {
            "output": "test1\n[ 2.00472107  0.03918241]\n0.249\ntest2\n0.000999999999827\ntest1\n[ 2.2595266  -0.33723283]\n0.249\ntest2\n0.000999999999947\ntest1\n[ 2.07277045  0.3578273 ]\n0.249000000028\ntest2\n0.000999999971753\ntest1\n[ 2.30434107 -0.35903985]\n0.249\ntest2\n0.000999999999655\n", 
            "score": 10, 
            "max_score": 10, 
            "name": "Check that the trajectory satisfied the specified 'orbit' constraint"
        }, 
        {
            "score": 4, 
            "max_score": 4, 
            "name": "Check that the time_array is valid"
        }, 
        {
            "output": "\n/notebooks/hopper_2d.py:276: DrakeDeprecationWarning: Use get_state_output_port() instead\n    Please see `help(pydrake.common.deprecation)` for more information.\n  builder.Connect(plant.get_continuous_state_output_port(), state_log.get_input_port(0))\n", 
            "score": 10, 
            "max_score": 10, 
            "name": "Verify that the hopper keeps hopping for 10s"
        }, 
        {
            "score": 5, 
            "max_score": 5, 
            "name": "Verify that the hopper tracks a desired lateral velocity"
        }, 
        {
            "score": 5, 
            "max_score": 5, 
            "name": "Verify that the hopper stabilizes both hopping and theta"
        }, 
        {
            "score": 1, 
            "max_score": 1, 
            "name": "Verify the signature of ChooseThighTorque"
        }
    ], 
    "score": 55, 
    "leaderboard": []
}
