{
    "execution_time": "10.17", 
    "tests": [
        {
            "output": "('Success', True)\n('Final position', array([ 2.23568667,  0.52324752, -0.97958972,  0.        ]))\n('Final distance to world2', 0.50000000005165901)\n('Fuel consumption', 372.30624163841298)\n('Success', True)\n('Final position', array([ 2.23161153,  0.52067521, -0.97958972,  0.        ]))\n('Final distance to world2', 0.50000000000217948)\n('Fuel consumption', 616.22665604233748)\n('Success', True)\n('Final position', array([ 2.2325871 ,  0.52129602, -0.97958972,  0.        ]))\n('Final distance to world2', 0.50000000000845657)\n('Fuel consumption', 354.55401475249795)\n('Success', True)\n('Final position', array([ 2.23065037,  0.52006045, -0.97958972,  0.        ]))\n('Final distance to world2', 0.50000000000552636)\n('Fuel consumption', 296.80638752323614)\n", 
            "score": 1, 
            "max_score": 1, 
            "name": "Run a few trajectory optimizations once, and persist the output"
        }, 
        {
            "output": "Test Failed: The trajectory, input_trajectory, and time_array have been                     computed to not be consistent with out euler integration when testing                     x0 = [-2.   0.4 -0.1  3. ]\n", 
            "score": 0.0, 
            "max_score": 4, 
            "name": "Check that the system approximately obeys the original dynamics"
        }, 
        {
            "output": "Test Failed: One of the tested trajectories caused the rocket to run out of fuel when testing                     x0 = [-2.   0.4 -0.1  3. ]\n", 
            "score": 0.0, 
            "max_score": 4, 
            "name": "Check that the trajectory was reasonably efficient with fuel use"
        }, 
        {
            "score": 10, 
            "max_score": 10, 
            "name": "Check that the initial state is valid"
        }, 
        {
            "score": 1, 
            "max_score": 1, 
            "name": "Check that the original parameters have not been changed"
        }, 
        {
            "output": "test1\n[ 2.23568667  0.52324752]\n0.249000000052\ntest2\n0.000999999948341\ntest1\n[ 2.23161153  0.52067521]\n0.249000000002\ntest2\n0.000999999997821\ntest1\n[ 2.2325871   0.52129602]\n0.249000000008\ntest2\n0.000999999991543\ntest1\n[ 2.23065037  0.52006045]\n0.249000000006\ntest2\n0.000999999994474\n", 
            "score": 10, 
            "max_score": 10, 
            "name": "Check that the trajectory satisfied the specified 'orbit' constraint"
        }, 
        {
            "score": 4, 
            "max_score": 4, 
            "name": "Check that the time_array is valid"
        }, 
        {
            "output": "\n/notebooks/hopper_2d.py:276: DrakeDeprecationWarning: Use get_state_output_port() instead\n    Please see `help(pydrake.common.deprecation)` for more information.\n  builder.Connect(plant.get_continuous_state_output_port(), state_log.get_input_port(0))\n", 
            "score": 10, 
            "max_score": 10, 
            "name": "Verify that the hopper keeps hopping for 10s"
        }, 
        {
            "score": 5, 
            "max_score": 5, 
            "name": "Verify that the hopper tracks a desired lateral velocity"
        }, 
        {
            "score": 5, 
            "max_score": 5, 
            "name": "Verify that the hopper stabilizes both hopping and theta"
        }, 
        {
            "score": 1, 
            "max_score": 1, 
            "name": "Verify the signature of ChooseThighTorque"
        }
    ], 
    "score": 47.0, 
    "leaderboard": []
}
